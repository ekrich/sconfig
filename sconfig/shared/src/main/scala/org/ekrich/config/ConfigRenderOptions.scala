/**
 * Copyright (C) 2011-2012 Typesafe Inc. <http://typesafe.com>
 */
package org.ekrich.config

/**
 * A set of options related to rendering a [[ConfigValue]]. Passed to
 * [[ConfigValue!.render(options:org\.ekrich\.config\.ConfigRenderOptions)* ConfigValue.render(ConfigRenderOptions)]].
 *
 * Here is an example of creating a `ConfigRenderOptions`:
 *
 * {{{
 * val options = ConfigRenderOptions.defaults.setComments(false)
 * }}}
 */
object ConfigRenderOptions {

  /**
   * Returns the default render options which are verbose (commented and
   * formatted). See [[ConfigRenderOptions$.concise*]] for stripped-down
   * options. This rendering will not be valid JSON since it has comments.
   *
   * @return
   *   the default render options
   *
   *   - originComments = true
   *   - comments = true
   *   - formatted = true
   *   - json = true
   *   - showEnvVariableValues = true
   *   - configFormatOptions = [[ConfigFormatOptions$.default*]]
   */
  def defaults = new ConfigRenderOptions(
    true,
    true,
    true,
    true,
    true,
    ConfigFormatOptions.defaults
  )

  /**
   * Returns concise render options (no whitespace or comments). For a resolved
   * [[Config]], the concise rendering will be valid JSON.
   *
   * @return
   *   the concise render options
   *
   *   - originComments = false
   *   - comments = false
   *   - formatted = false
   *   - json = true
   *   - showEnvVariableValues = true
   *   - configFormatOptions = [[ConfigFormatOptions$.default*]]
   */
  def concise = new ConfigRenderOptions(
    false,
    false,
    false,
    true,
    true,
    ConfigFormatOptions.defaults
  )
}

@deprecated("Use getConfigFormatOptions", "Since 1.12.0, will remove in 1.14.0")
case class FormattingOptions(
    keepOriginOrder: Boolean = false,
    doubleIndent: Boolean = true,
    colonAssign: Boolean = false,
    newLineAtEnd: Boolean = true
)

final class ConfigRenderOptions private (
    private val _originComments: Boolean,
    private val _comments: Boolean,
    private val _formatted: Boolean,
    private val _json: Boolean,
    private val _showEnvVariableValues: Boolean,
    private val _configFormatOptions: ConfigFormatOptions
) {

  /**
   * Returns options with comments toggled. This controls human-written comments
   * but not the autogenerated "origin of this setting" comments, which are
   * controlled by [[ConfigRenderOptions#setOriginComments]].
   *
   * @param value
   *   true to include comments in the render
   * @return
   *   options with requested setting for comments
   */
  def setComments(value: Boolean): ConfigRenderOptions =
    if (value == _comments) this
    else
      new ConfigRenderOptions(
        _originComments,
        value,
        _formatted,
        _json,
        _showEnvVariableValues,
        _configFormatOptions
      )

  /**
   * Returns whether the options enable comments. This method is mostly used by
   * the config lib internally, not by applications.
   *
   * @return
   *   true if comments should be rendered
   */
  def getComments: Boolean = _comments

  /**
   * Returns options with origin comments toggled. If this is enabled, the
   * library generates comments for each setting based on the
   * [[ConfigValue#origin]] of that setting's value. For example these comments
   * might tell you which file a setting comes from.
   *
   * <p> `setOriginComments(Boolean)` controls only these autogenerated "origin
   * of this setting" comments, to toggle regular comments use
   * [[ConfigRenderOptions#setComments]].
   *
   * @param value
   *   true to include autogenerated setting-origin comments in the render
   * @return
   *   options with origin comments toggled
   */
  def setOriginComments(value: Boolean): ConfigRenderOptions =
    if (value == _originComments) this
    else
      new ConfigRenderOptions(
        value,
        _comments,
        _formatted,
        _json,
        _showEnvVariableValues,
        _configFormatOptions
      )

  /**
   * Returns whether the options enable automated origin comments. This method
   * is mostly used by the config lib internally, not by applications.
   *
   * @return
   *   true if origin comments should be rendered
   */
  def getOriginComments: Boolean = _originComments

  /**
   * Returns options with formatting toggled. Formatting means indentation and
   * whitespace, enabling formatting makes things prettier but larger.
   *
   * @param value
   *   true to enable formatting
   * @return
   *   options with requested setting for formatting
   */
  def setFormatted(value: Boolean): ConfigRenderOptions =
    if (value == _formatted) this
    else
      new ConfigRenderOptions(
        _originComments,
        _comments,
        value,
        _json,
        _showEnvVariableValues,
        _configFormatOptions
      )

  /**
   * Returns whether the options enable formatting. This method is mostly used
   * by the config lib internally, not by applications.
   *
   * @return
   *   true if the options enable formatting
   */
  def getFormatted: Boolean = _formatted

  /**
   * Set the config format options. Formatting is dependant on formatted flag.
   *
   * @param value
   *   the new ConfigFormatOptions object
   * @return
   *   the new ConfigRenderOptions object with the new formatting setting
   * @since 1.12.0
   */
  def setConfigFormatOptions(value: ConfigFormatOptions): ConfigRenderOptions =
    if (value == _configFormatOptions) this
    else
      new ConfigRenderOptions(
        _originComments,
        _comments,
        _formatted,
        _json,
        _showEnvVariableValues,
        value
      )

  /**
   * Returns options used to format the config.
   *
   * @return
   *   the config format option
   * @since 1.12.0
   */
  def getConfigFormatOptions: ConfigFormatOptions = _configFormatOptions

  @deprecated(
    "Use getOriginComments",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def originComments = _originComments

  @deprecated(
    "Use getComments",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def comments = _comments

  @deprecated(
    "Use getFormatted",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def formatted = _formatted

  @deprecated(
    "Use getJson",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def json = _json

  @deprecated(
    "Use getShowEnvVariableValues",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def showEnvVariableValues = _showEnvVariableValues

  /**
   * Returns new render options with formatting options set. Formatting is
   * dependant on formatted flag.
   *
   * @param value
   *   true to enable formatting
   * @return
   *   options with requested setting for formatting
   */
  @deprecated(
    "Use setConfigFormatOptions",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def setFormattingOptions(value: FormattingOptions): ConfigRenderOptions =
    if (value == convert(_configFormatOptions)) this
    else
      new ConfigRenderOptions(
        _originComments,
        _comments,
        _formatted,
        _json,
        _showEnvVariableValues,
        convert(value)
      )

  private def convert(value: FormattingOptions): ConfigFormatOptions =
    ConfigFormatOptions.defaults
      .setKeepOriginOrder(value.keepOriginOrder)
      .setDoubleIndent(value.doubleIndent)
      .setColonAssign(value.colonAssign)
      .setNewLineAtEnd(value.newLineAtEnd)

  private def convert(value: ConfigFormatOptions): FormattingOptions =
    FormattingOptions(
      value.getKeepOriginOrder,
      value.getDoubleIndent,
      value.getColonAssign,
      value.getNewLineAtEnd
    )

  @deprecated(
    "Use getConfigFormatOptions",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def formattingOptions: FormattingOptions = convert(_configFormatOptions)

  @deprecated(
    "Use getConfigFormatOptions",
    "Since 1.12.0, will remove in 1.14.0"
  )
  def getFormattingOptions: FormattingOptions = convert(_configFormatOptions)

  /**
   * Returns options with JSON toggled. JSON means that HOCON extensions
   * (omitting commas, quotes for example) won't be used. However, whether to
   * use comments is controlled by the separate [[#setComments]] and
   * [[#setOriginComments]] options. So if you enable comments you will get
   * invalid JSON despite setting this to true.
   *
   * @param value
   *   true to include non-JSON extensions in the render
   * @return
   *   options with requested setting for JSON
   */
  def setJson(value: Boolean): ConfigRenderOptions =
    if (value == _json) this
    else
      new ConfigRenderOptions(
        _originComments,
        _comments,
        _formatted,
        value,
        _showEnvVariableValues,
        _configFormatOptions
      )

  /**
   * Returns whether the options enable JSON. This method is mostly used by the
   * config lib internally, not by applications.
   *
   * @return
   *   true if only JSON should be rendered
   */
  def getJson: Boolean = _json

  /**
   * Returns options with showEnvVariableValues toggled. This controls if values
   * set from environment variables are included in the rendered string.
   *
   * @param value
   *   true to include environment variable values in the render
   * @return
   *   options with requested setting for environment variables
   */
  def setShowEnvVariableValues(value: Boolean): ConfigRenderOptions =
    if (value == _showEnvVariableValues) this
    else
      new ConfigRenderOptions(
        _originComments,
        _comments,
        _formatted,
        _json,
        value,
        _configFormatOptions
      )

  /**
   * Returns whether the options enable rendering of environment variable
   * values. This method is mostly used by the config lib internally, not by
   * applications.
   *
   * @return
   *   true if environment variable values should be rendered
   */
  def getShowEnvVariableValues: Boolean = _showEnvVariableValues

  override def toString: String = {
    val sb = new StringBuilder("ConfigRenderOptions(")
    if (_originComments) sb.append("originComments,")
    if (_comments) sb.append("comments,")
    if (_formatted) {
      sb.append("formatted,")
      if (_configFormatOptions.getKeepOriginOrder) sb.append("keepOriginOrder,")
      if (_configFormatOptions.getDoubleIndent) sb.append("doubleIndent,")
      if (_configFormatOptions.getColonAssign) sb.append("colonAssign,")
      if (_configFormatOptions.getNewLineAtEnd) sb.append("newLineAtEnd,")
      if (_configFormatOptions.getSimplifyNestedObjects)
        sb.append("simplifyOneEntryNestedObjects,")
    }
    if (_json) sb.append("json,")
    if (_showEnvVariableValues) sb.append("showEnvVariableValues,")
    val lastIndex = sb.length - 1
    if (sb.charAt(lastIndex) == ',')
      sb.setCharAt(lastIndex, ')')
    else
      sb.append(')')
    sb.toString
  }
}
